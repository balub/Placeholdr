// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid              String    @id @default(cuid())
  displayName      String?
  email            String?   @unique
  photoURL         String?
  refreshToken     String?
  providerAccounts Account[]
  createdOn        DateTime  @default(now()) @db.Timestamp(3)
  Project          Project[]
  Widgets          Widgets[]
}

model Account {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [uid], onDelete: Cascade)
  provider             String
  providerAccountId    String
  providerRefreshToken String?
  providerAccessToken  String?
  providerScope        String?
  loggedIn             DateTime @default(now()) @db.Timestamp(3)

  @@unique(fields: [provider, providerAccountId], name: "verifyProviderAccount")
}

model Project {
  id        String    @id @default(uuid())
  name      String
  createdBy String
  user      User      @relation(fields: [createdBy], references: [uid], onDelete: Cascade)
  createdOn DateTime  @default(now())
  updatedOn DateTime  @updatedAt
  Widgets   Widgets[]
  Events    Events[]
}

model Widgets {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy String
  user      User     @relation(fields: [createdBy], references: [uid], onDelete: Cascade)
  meta      Json
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
}

model Components {
  id        String   @unique @default(uuid())
  name      String   @unique
  status    Status   @default(ACTIVATE)
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
}

model Events {
  id          String   @unique @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  componentId String
  sessionId   String
  data        Json
  createdOn   DateTime @default(now())
}

enum Status {
  ACTIVATE
  DEACTIVATE
}
